name: yamdb workflow

on: [push]

jobs:
  
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt
    - name: Test with flake8 and pytest
      run: |
        python -m flake8
        python -m pytest
  
  build_and_push_to_dockerhub:
    name: Build and Push Docker image to DockerHub
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    needs: tests
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v2
        with:
          push: True
          tags: ${{ secrets.DOCKER_USERNAME }}/yamdb:latest
          context: ./api_yamdb/
  
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    needs: build_and_push_to_dockerhub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker compose down
            sudo docker compose rm web
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb
            cd yamdb/
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST}} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose up -d
            sudo docker compose exec web bash
            python manage.py migrate
            python manage.py collectstatic --no-input
            exit

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ secrets.message }} 
